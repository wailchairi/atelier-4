#include <iostream>
struct Element {
    int valeur;          
    Element* suivant;    

    Element(int val) : valeur(val), suivant(nullptr) {}
};

class Liste {
private:
    Element* tete;  

public:
    Liste() : tete(nullptr) {}

    void ajouterDebut(int val) {
        Element* nouvelElement = new Element(val);
        nouvelElement->suivant = tete; 
        tete = nouvelElement;          
        std::cout << "Élément " << val << " ajouté au début de la liste.\n";
    }

    void supprimerDebut() {
        if (tete != nullptr) {
            Element* aSupprimer = tete;
            tete = tete->suivant;  
            delete aSupprimer;     
            std::cout << "Élément supprimé du début de la liste.\n";
        } else {
            std::cout << "La liste est déjà vide.\n";
        }
    }

    void afficherListe() const {
        if (tete == nullptr) {
            std::cout << "La liste est vide.\n";
            return;
        }

        Element* actuel = tete;
        std::cout << "Contenu de la liste : ";
        while (actuel != nullptr) {
            std::cout << actuel->valeur << " ";
            actuel = actuel->suivant;
        }
        std::cout << "\n";
    }

    ~Liste() {
        while (tete != nullptr) {
            supprimerDebut();  
        }
        std::cout << "Tous les éléments de la liste ont été libérés.\n";
    }
};

int main() {
    Liste maListe;

    maListe.ajouterDebut(10);  
    maListe.ajouterDebut(20);  
    maListe.ajouterDebut(30);  
    maListe.afficherListe(); 

    maListe.supprimerDebut();  
    maListe.afficherListe();   
   
    return 0;
}
